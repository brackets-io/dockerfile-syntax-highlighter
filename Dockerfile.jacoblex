// node node_modules/.bin/jacob -t Dockerfile.jacoblex -l dockerlex.js

%moduleName DockerfileLexer

%%

digits = [0-9]
directive = (FROM|MAINTAINER|ENV|ADD|ENTRYPOINT|EXPOSE|RUN|CMD|COPY|ENTRYPOINT|VOLUME|USER|WORKDIR|ONBUILD|LABEL)
openstring = .+

label = \w+
equals = =

string = .+

%%


<>$ {console.log('EOL');}
<>^\s*\n    { } // empty line

<>#.*  {
  return 'COMMENT';
}

/********************************************************************
 * Parse quoted strings
 */
<>["']     { this.pushState('QUOTEDSTRING'); return null}
<QUOTEDSTRING>["']   {
  this.popState();
  return null;
}
<QUOTEDSTRING>(\n|\r|.) { return 'STRING'}


/********************************************************************
 * Parse unquoted strings, supporting escaped new-lines and comments
 */

<UNQUOTEDSTRING>#.* { // comment
  this.popState();
  var s = this.getState();
  if (s.match(/^(ENV)$/)) {
    this.popState();
  }
  return 'COMMENT';
}
<UNQUOTEDSTRING>\\ {  // escaped eol, continue string
  return 'STRING';
}
<UNQUOTEDSTRING>[^\\#]+|\\. {
  if (!this.input.more()) {
    this.popState();
    var s = this.getState();
    if (s.match(/^(ENV)$/)) {
      this.popState();
    }
  }
  return 'STRING';
}

/********************************************************************
 * ENV directive
 */
<ENV>\s+ {
  if (this.input.more()) {
    this.pushState('ENVDEF');
  }
  return null;
}
<ENV>\s*#.* {
  console.log('ENV comment');
  this.popState();
  return 'COMMENT';
}
<ENVDEF>\w+ {
  this.popState();
  if (this.input.more()) {
    this.pushState('ENVASSIGN');
  } else {
    // pop out of ENV
    this.popState();
  }
  return 'DEF';
}
<ENVASSIGN>\s*=\s* {
  this.popState();
  if (this.input.more()) {
    this.pushState('ENVVAL');
  } else {
    // pop out of ENV
    this.popState();
  }
  return null;
}
<ENVASSIGN>\s+ {
  this.popState();
  if (this.input.more()) {
    this.pushState('UNQUOTEDSTRING');
  } else {
    // pop out of ENV
    this.popState();
  }
  return null;
}
<ENVASSIGN>. {
  console.error('ENVASSIGN error');
  return 'ERROR';
}
<ENVVAL>["'] {
  this.popState();
  this.pushState('QUOTEDSTRING');
  return null;
}
<ENVVAL>[^"'] {
  this.less(1);
  this.popState();
  this.pushState('UNQUOTEDSTRING');
  return 'STRING';
}

/********************************************************************
 * Match all directives directive
 */
<>{directive}  {
  var d = this.jjtext.match(/(\w+)/)[1];
  this.jjval = d;

  if (d.match(/RUN|CMD/i)) {
    this.localMode = this.bashMode;
    this.localState = this.bashMode.startState();
  } else {
    if (!d.match(/ENV/i)) {
      d = 'DOCKDIR';
    }
    this.pushState(d);
  }
  return 'DOCKDIR';
}
<DOCKDIR>\s+ {
  this.jjval = this.jjtext.trim();
  this.popState();
  this.pushState('UNQUOTEDSTRING');
  return null;
}
<DOCKDIR>. {
  console.error('DOCKDIR error');
  return 'ERROR';
}

<ENV>\s+{openstring}\n {
  this.jjval = this.jjtext.trim();
  this.popState();
  return 'STRING';
}


// Catchalls
<>\s+   {
  console.log('caught remaining whitespace');
} // remaining whitespace

<>. {
  //console.error('caught error');
  return 'ERROR';
} // anything else unexpected
